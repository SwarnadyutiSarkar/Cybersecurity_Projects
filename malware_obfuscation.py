import base64
from Crypto.Cipher import AES
import os

def base64_encode(payload):
    """Base64 encode the payload."""
    try:
        encoded_payload = base64.b64encode(payload)
        return encoded_payload
    except Exception as e:
        print(f"Error encoding payload with Base64: {e}")
        return None

def base64_decode(encoded_payload):
    """Base64 decode the encoded payload."""
    try:
        decoded_payload = base64.b64decode(encoded_payload)
        return decoded_payload
    except Exception as e:
        print(f"Error decoding payload with Base64: {e}")
        return None

def aes_encrypt(plaintext, key):
    """Encrypt plaintext using AES."""
    try:
        cipher = AES.new(key, AES.MODE_ECB)
        padded_plaintext = plaintext + (AES.block_size - len(plaintext) % AES.block_size) * chr(AES.block_size - len(plaintext) % AES.block_size)
        ciphertext = cipher.encrypt(padded_plaintext)
        return ciphertext
    except Exception as e:
        print(f"Error encrypting plaintext with AES: {e}")
        return None

def aes_decrypt(ciphertext, key):
    """Decrypt ciphertext using AES."""
    try:
        cipher = AES.new(key, AES.MODE_ECB)
        padded_plaintext = cipher.decrypt(ciphertext)
        plaintext = padded_plaintext.rstrip(chr(AES.block_size - len(padded_plaintext) % AES.block_size))
        return plaintext
    except Exception as e:
        print(f"Error decrypting ciphertext with AES: {e}")
        return None

if __name__ == "__main__":
    # Sample payload to demonstrate obfuscation techniques
    original_payload = b"This is a sample payload."
    
    # Base64 encoding
    encoded_payload = base64_encode(original_payload)
    print(f"Base64 encoded payload: {encoded_payload}")
    
    # Base64 decoding
    decoded_payload = base64_decode(encoded_payload)
    print(f"Base64 decoded payload: {decoded_payload}")
    
    # AES encryption
    key = os.urandom(16)  # Generate random 16-byte key
    encrypted_payload = aes_encrypt(original_payload, key)
    print(f"AES encrypted payload: {encrypted_payload}")
    
    # AES decryption
    decrypted_payload = aes_decrypt(encrypted_payload, key)
    print(f"AES decrypted payload: {decrypted_payload}")
